server:
  port: 80

spring:
  application:
    name: Gateway

  cloud:
    gateway:
      routes:
        - id: animalservice-animals
          uri: http://animalservice:8080
          predicates:
            - Path=/api/v1/animals/**,  /api/v1/animaldata/**, /api/v1/animaldata, /api/v1/finders/animal/**, /api/v1/fences/**, /api/v1/fences
        - id: animalservice-websocket
          uri: ws://animalservice:8080
          predicates:
            - Path=/ws/animaldata/**
          filters:
            - PreserveHostHeader=true
        - id: notificationservice
          uri: http://notificationservice:8080
          predicates:
            - Path=/api/v1/notifications/**, /api/v1/notifications
        - id: reportservice
          uri: http://reportservice:8080
          predicates:
            - Path=/api/v1/reports/**, /api/v1/reports
        - id: userservice
          uri: http://userservice:8080
          predicates:
            - Path=/api/v1/users/**, /api/v1/users, /api/v1/finders/user/**
        - id: pwa
          uri: http://pwa:5173
          predicates:
            - Path=/**


  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://userservice:8080/api/v1/pub_key # URL do servidor de autorização jwk

# JWK deve ter uma estrutura com a informação mínima de chave pública
# {
#   "keys": [
#     {
#       "kty": "RSA",
#       "e": "...",
#       "n": "..."
#     }
#   ]
# }

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web.reactive.socket: DEBUG
    org.springframework.security: DEBUG
    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
    org.springframework.security.oauth2.jwt: DEBUG
    org.springframework.security.oauth2.client: DEBUG
    org.springframework.web.client.RestTemplate: DEBUG
    org.springframework.security.oauth2: DEBUG
    org.springframework.security.oauth2.resourceserver: DEBUG